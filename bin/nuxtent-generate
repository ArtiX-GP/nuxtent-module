#!/usr/bin/env node

process.env.DEBUG = process.env.DEBUG || 'nuxt:*'
process.env.STATIC = true

const fs = require('fs')
const parseArgs = require('minimist')
const debug = require('debug')('nuxt:generate')

const { Nuxt, Builder, Generator } = require('nuxt')
const { resolve } = require('path')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help',
    c: 'config-file'
  },
  boolean: ['h'],
  string: ['c'],
  default: {
    c: 'nuxt.config.js'
  }
})

const port = argv.port || process.env.PORT || process.env.npm_package_config_nuxt_port
const host = argv.hostname || process.env.HOST || process.env.npm_package_config_nuxt_host


if (argv.help) {
  console.log(`
    Description
      Generate a static web application (server-rendered)
    Usage
      $ nuxt generate <dir>
    Options
      --config-file, -c   Path to Nuxt.js config file (default: nuxt.config.js)
      --help, -h          Displays this message
  `)
  process.exit(0)
}

const rootDir = resolve(argv._[0] || '.')
const nuxtConfigFile = resolve(rootDir, argv['config-file'])

var options = {}
if (fs.existsSync(nuxtConfigFile)) {
  options = require(nuxtConfigFile)
} else if (argv['config-file'] !== 'nuxt.config.js') {
  console.error(`> Could not load config file ${argv['config-file']}`)
  process.exit(1)
}
if (typeof options.rootDir !== 'string') {
  options.rootDir = rootDir
}
options.dev = false // Force production mode (no webpack middleware called)

debug('Starting Nuxtent to generate content files...')
const nuxt = new Nuxt(options)

nuxt.listen(port, host).then(()=> {
  const generator = new Generator(nuxt, new Builder(nuxt))
  generator.generate()
    .then(() => {
      debug('Generate done')
      nuxt.close()
      process.exit(0)
    })
    .catch((err) => {
      console.error(err) // eslint-disable-line no-console
      nuxt.close()
      process.exit(1)
    })

})
