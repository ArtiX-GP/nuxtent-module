/** Declaration file generated by dts-gen */

declare namespace Nuxt {

    const options: {
        ErrorPage: any;
        appTemplatePath: string;
        build: {
            analyze: boolean;
            babel: {
                babelrc: boolean;
                cacheDirectory: boolean;
                configFile: boolean;
            };
            cache: boolean;
            crossorigin: any;
            cssSourceMap: boolean;
            devMiddleware: {
            };
            extractCSS: boolean;
            filenames: {
                app: any;
                chunk: any;
                css: any;
                font: any;
                img: any;
                video: any;
            };
            friendlyErrors: boolean;
            hardSource: boolean;
            hotMiddleware: {
            };
            html: {
                minify: {
                    collapseBooleanAttributes: boolean;
                    decodeEntities: boolean;
                    minifyCSS: boolean;
                    minifyJS: boolean;
                    processConditionalComments: boolean;
                    removeEmptyAttributes: boolean;
                    removeRedundantAttributes: boolean;
                    trimCustomFragments: boolean;
                    useShortDoctype: boolean;
                };
            };
            loaders: {
                css: {
                    sourceMap: boolean;
                };
                cssModules: {
                    localIdentName: string;
                    sourceMap: boolean;
                };
                file: {
                };
                fontUrl: {
                    limit: number;
                };
                imgUrl: {
                    limit: number;
                };
                less: {
                    sourceMap: boolean;
                };
                pugPlain: {
                };
                sass: {
                    indentedSyntax: boolean;
                    sourceMap: boolean;
                };
                scss: {
                    sourceMap: boolean;
                };
                stylus: {
                    sourceMap: boolean;
                };
                ts: {
                    appendTsSuffixTo: RegExp[];
                    transpileOnly: boolean;
                };
                tsx: {
                    appendTsxSuffixTo: RegExp[];
                    transpileOnly: boolean;
                };
                vue: {
                    productionMode: boolean;
                    transformAssetUrls: {
                        embed: string;
                        object: string;
                        source: string;
                        video: string;
                    };
                };
                vueStyle: {
                    sourceMap: boolean;
                };
            };
            optimization: {
                minimize: boolean;
                minimizer: any;
                runtimeChunk: string;
                splitChunks: {
                    automaticNameDelimiter: string;
                    cacheGroups: {
                    };
                    chunks: string;
                    name: any;
                };
            };
            optimizeCSS: boolean;
            parallel: boolean;
            plugins: any[];
            postcss: {
                preset: {
                    stage: number;
                };
            };
            profile: boolean;
            publicPath: string;
            quiet: boolean;
            splitChunks: {
                commons: boolean;
                layouts: boolean;
                pages: boolean;
            };
            ssr: boolean;
            standalone: boolean;
            stats: {
                excludeAssets: RegExp[];
            };
            styleResources: {
            };
            template: any;
            templates: any[];
            terser: {
            };
            transpile: any[];
            typescript: {
                typeCheck: boolean;
            };
            watch: any[];
        };
        buildDir: string;
        cli: {
            badgeMessages: any[];
        };
        css: any[];
        debug: boolean;
        dev: boolean;
        devModules: string[];
        dir: {
            assets: string;
            layouts: string;
            middleware: string;
            pages: string;
            static: string;
            store: string;
        };
        editor: any;
        env: {
        };
        extensions: string[];
        fetch: {
            client: boolean;
            server: boolean;
        };
        generate: {
            concurrency: number;
            dir: string;
            exclude: any[];
            fallback: string;
            interval: number;
            routes: any[];
            subFolders: boolean;
        };
        globalName: string;
        globals: {
            context: any;
            id: any;
            loadedCallback: any;
            nuxt: any;
            pluginPrefix: any;
            readyCallback: any;
        };
        head: {
            link: any[];
            meta: any[];
            script: any[];
            style: any[];
        };
        hooks: any;
        ignore: string[];
        ignorePrefix: string;
        layoutTransition: {
            mode: string;
            name: string;
        };
        layouts: {
        };
        loading: {
            color: string;
            continuous: boolean;
            css: boolean;
            duration: number;
            failedColor: string;
            height: string;
            rtl: boolean;
            throttle: number;
        };
        loadingIndicator: {
            background: string;
            color: string;
            color2: string;
            dev: boolean;
            loading: string;
            name: string;
        };
        messages: {
            back_to_home: string;
            client_error: string;
            client_error_details: string;
            error_404: string;
            loading: string;
            nuxtjs: string;
            server_error: string;
            server_error_details: string;
        };
        mode: string;
        modern: any;
        modes: {
            spa: {
                build: {
                    ssr: boolean;
                };
                render: {
                    ssr: boolean;
                };
            };
            universal: {
                build: {
                    ssr: boolean;
                };
                render: {
                    ssr: boolean;
                };
            };
        };
        modules: any[];
        modulesDir: string[];
        plugins: any[];
        render: {
            bundleRenderer: {
                runInNewContext: boolean;
                shouldPrefetch: any;
                shouldPreload: any;
            };
            compressor: {
                threshold: number;
            };
            csp: boolean;
            dist: {
                index: boolean;
                maxAge: string;
            };
            etag: {
                weak: boolean;
            };
            fallback: {
                dist: {
                };
                static: {
                    handlers: {
                        ".htm": boolean;
                        ".html": boolean;
                    };
                    skipUnknown: boolean;
                };
            };
            http2: {
                push: boolean;
                pushAssets: any;
                shouldPush: any;
            };
            resourceHints: boolean;
            ssr: boolean;
            static: {
                prefix: boolean;
            };
        };
        rootDir: string;
        router: {
            base: string;
            extendRoutes: any;
            fallback: boolean;
            linkActiveClass: string;
            linkExactActiveClass: string;
            linkPrefetchedClass: boolean;
            middleware: any[];
            mode: string;
            parseQuery: boolean;
            prefetchLinks: boolean;
            routeNameSplitter: string;
            routes: any[];
            scrollBehavior: any;
            stringifyQuery: boolean;
        };
        server: {
            host: string;
            https: boolean;
            port: number;
            socket: any;
            timing: boolean;
        };
        serverMiddleware: any[];
        srcDir: string;
        styleExtensions: string[];
        test: boolean;
        transition: {
            appear: boolean;
            appearActiveClass: string;
            appearClass: string;
            appearToClass: string;
            mode: string;
            name: string;
        };
        vue: {
            config: {
                performance: boolean;
                silent: boolean;
            };
        };
        watch: string[];
        watchers: {
            chokidar: {
                ignoreInitial: boolean;
            };
            rewatchOnRawEvents: string[];
            webpack: {
            };
        };
    };

    function addHooks(...args: any[]): void;

    function callHook(p0: any): any;

    function clearHook(...args: any[]): void;

    function clearHooks(...args: any[]): void;

    function close(...args: any[]): void;

    function flatHooks(...args: any[]): void;

    function hook(p0: any, p1: any): any;

    function listen(p0: any, p1: any, p2: any): any;

    function ready(...args: any[]): void;

    function render(req: any, res: any, next: any): void;

    function renderAndGetWindow(p0: any): any;

    function renderRoute(): any;

    function resolveAlias(p0: any): any;

    function resolvePath(p0: any): any;

    function showReady(): void;

    namespace moduleContainer {


        const requiredModules: {
        };

        function addErrorLayout(...args: any[]): void;

        function addLayout(...args: any[]): void;

        function addModule(...args: any[]): void;

        function addPlugin(...args: any[]): void;

        function addServerMiddleware(...args: any[]): void;

        function addTemplate(...args: any[]): void;

        function addVendor(...args: any[]): void;

        function extendBuild(...args: any[]): void;

        function extendRoutes(...args: any[]): void;

        function ready(...args: any[]): void;

        function requireModule(...args: any[]): void;

    }

    namespace render {
        const prototype: {
        };

        const route: string;

        const stack: any[];

        function addListener(type: any, listener: any): any;

        function emit(args: any): any;

        function eventNames(): any;

        function getMaxListeners(): any;

        function handle(req: any, res: any, out: any): any;

        function listen(...args: any[]): any;

        function listenerCount(type: any): any;

        function listeners(type: any): any;

        function off(type: any, listener: any): any;

        function on(type: any, listener: any): any;

        function once(type: any, listener: any): any;

        function prependListener(type: any, listener: any): any;

        function prependOnceListener(type: any, listener: any): any;

        function rawListeners(type: any): any;

        function removeAllListeners(type: any, ...args: any[]): any;

        function removeListener(type: any, listener: any): any;

        function setMaxListeners(n: any): any;

        function use(route: any, fn: any): any;

    }

    namespace renderer {
        const globals: {
            context: string;
            id: string;
            loadedCallback: string;
            nuxt: string;
            pluginPrefix: string;
            readyCallback: string;
        };

        const listeners: any[];


        const publicPath: string;

        const resources: {
        };

        function app(req: any, res: any, next: any): void;

        function close(...args: any[]): void;

        function listen(...args: any[]): void;

        function loadResources(...args: any[]): void;

        function ready(...args: any[]): void;

        function renderAndGetWindow(...args: any[]): void;

        function renderRoute(...args: any[]): void;

        function setupMiddleware(...args: any[]): void;

        function useMiddleware(...args: any[]): void;

        namespace app {
            const prototype: {
            };
            const nuxt: Nuxt
            const route: string;

            const stack: any[];

            function addListener(type: any, listener: any): any;

            function emit(args: any): any;

            function eventNames(): any;

            function getMaxListeners(): any;

            function handle(req: any, res: any, out: any): any;

            function listen(...args: any[]): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function off(type: any, listener: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function rawListeners(type: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeListener(type: any, listener: any): any;

            function setMaxListeners(n: any): any;

            function use(route: any, fn: any): any;
        }


    }

    namespace resolver {
        function esm(r: any): any;

        function requireModule(p0: any): any;

        function resolveAlias(p0: any): any;

        function resolveModule(p0: any): any;

        function resolvePath(p0: any): any;
        const Esm: Esm

    }

    namespace server {
        const globals: {
            context: string;
            id: string;
            loadedCallback: string;
            nuxt: string;
            pluginPrefix: string;
            readyCallback: string;
        };

        const listeners: any[];

        const publicPath: string;

        const resources: {
        };

        function app(req: any, res: any, next: any): void;

        function close(...args: any[]): void;

        function listen(...args: any[]): void;

        function loadResources(...args: any[]): void;

        function ready(...args: any[]): void;

        function renderAndGetWindow(...args: any[]): void;

        function renderRoute(...args: any[]): void;

        function setupMiddleware(...args: any[]): void;

        function useMiddleware(...args: any[]): void;


    }

}

